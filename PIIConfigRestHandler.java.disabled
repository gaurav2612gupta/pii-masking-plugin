/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */
package org.opensearch.plugin.piimasking.rest;

import org.opensearch.client.node.NodeClient;
import org.opensearch.core.rest.RestStatus;
import org.opensearch.core.xcontent.XContentBuilder;
import org.opensearch.core.xcontent.XContentParser;
import org.opensearch.plugin.piimasking.config.PIIConfiguration;
import org.opensearch.plugin.piimasking.processor.PIIMaskingProcessor;
import org.opensearch.rest.BaseRestHandler;
import org.opensearch.rest.BytesRestResponse;
import org.opensearch.rest.RestRequest;

import java.io.IOException;
import java.util.List;

import static org.opensearch.core.xcontent.XContentFactory.jsonBuilder;
import static org.opensearch.rest.RestRequest.Method.GET;
import static org.opensearch.rest.RestRequest.Method.PUT;

/**
 * REST handler for PII masking configuration
 * 
 * Endpoints:
 * - PUT /_plugins/pii-masking/config - Update configuration
 * - GET /_plugins/pii-masking/config - Get current configuration
 */
public class PIIConfigRestHandler extends BaseRestHandler {
    
    private static final String PLUGIN_BASE_URI = "/_plugins/pii-masking";
    
    @Override
    public List<Route> routes() {
        return List.of(
            new Route(PUT, PLUGIN_BASE_URI + "/config"),
            new Route(GET, PLUGIN_BASE_URI + "/config")
        );
    }
    
    @Override
    public String getName() {
        return "pii_masking_config_handler";
    }
    
    @Override
    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {
        switch (request.method()) {
            case PUT:
                return handlePutConfig(request);
            case GET:
                return handleGetConfig(request);
            default:
                return channel -> channel.sendResponse(
                    new BytesRestResponse(RestStatus.METHOD_NOT_ALLOWED, "Method not allowed")
                );
        }
    }
    
    /**
     * Handle PUT request to update PII masking configuration
     */
    private RestChannelConsumer handlePutConfig(RestRequest request) throws IOException {
        return channel -> {
            try {
                XContentParser parser = request.contentParser();
                PIIConfiguration newConfig = PIIConfiguration.PARSER.parse(parser, null);
                
                // Update the global configuration
                PIIMaskingProcessor.updateGlobalConfiguration(newConfig);
                
                // Return success response
                XContentBuilder builder = jsonBuilder()
                    .startObject()
                    .field("acknowledged", true)
                    .field("message", "PII masking configuration updated successfully")
                    .endObject();
                
                channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));
                
            } catch (Exception e) {
                XContentBuilder errorBuilder = jsonBuilder()
                    .startObject()
                    .field("error", "Failed to update configuration")
                    .field("details", e.getMessage())
                    .endObject();
                
                channel.sendResponse(new BytesRestResponse(RestStatus.BAD_REQUEST, errorBuilder));
            }
        };
    }
    
    /**
     * Handle GET request to retrieve current PII masking configuration
     */
    private RestChannelConsumer handleGetConfig(RestRequest request) throws IOException {
        return channel -> {
            try {
                PIIConfiguration currentConfig = PIIMaskingProcessor.getGlobalConfiguration();
                
                XContentBuilder builder = jsonBuilder();
                currentConfig.toXContent(builder, request);
                
                channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));
                
            } catch (Exception e) {
                XContentBuilder errorBuilder = jsonBuilder()
                    .startObject()
                    .field("error", "Failed to retrieve configuration")
                    .field("details", e.getMessage())
                    .endObject();
                
                channel.sendResponse(new BytesRestResponse(RestStatus.INTERNAL_SERVER_ERROR, errorBuilder));
            }
        };
    }
}
